let chai = require('chai');
const fs = require('fs');
const EventEmitter = require('events');

describe('Errors', function () {
    // before(() => {
    //     process.on('uncaughtException', (err) => {
    //         console.error('uncaughtException', err, typeof err);
    //         chai.expect(err).to.be.an.instanceof(Error);
    //     });
    // });

    it('Throws with a ReferenceError because z is undefined', function () {
        try {
            const m = 1;
            const n = m + z;
        } catch (err) {
            // Handle the error here.
            chai.expect(err).to.be.an.instanceof(ReferenceError);
            //All errors generated by Node.js, including all System and JavaScript errors, will either be instances of, or inherit from, the Error class.
            chai.expect(err).to.be.an.instanceof(Error);
        }
    });

    it('A function throws with a ReferenceError because z is undefined', function () {
        const f = () => {
            const m = 1;
            const n = m + z;
        };

        chai.expect(f).to.throw(ReferenceError);
        chai.expect(f).to.throw(Error);
    });

    it('asynchronous methods that accept a callback function will accept an Error object passed', function (done) {
        // process.on('uncaughtException', (err) => {
        //     console.error('uncaughtException', err, typeof err);
        //     chai.expect(err).to.be.an.instanceof(Error);
        // });
        fs.readFile('a file that does not exist', (err, data) => {
            if (err) {
                //console.error('There was an error reading the file!', err, typeof err);
                chai.expect(err).to.be.an.instanceof(Error);
            }
            done();
        });
    });

    it('2. if an \'error\' event handler is not provided, the error will be thrown, causing the Node.js process to report an uncaught exception and crash', function (done) {
        const ee = new EventEmitter();
        //registering error listener to avoid process crash
        ee.on('error', (err) => {
            chai.expect(err).to.be.an.instanceof(Error);
        });


        setImmediate(() => {
            // This will not crash the process because since 'error' event
            // handler has been added.
            ee.emit('error', new Error('This will crash'));
            done();
        });
    });


    it('Class: RangeError', function () {
        const f = () => require('net').connect(-1);
        chai.expect(f).to.throw(RangeError);
        chai.expect(f).to.throw(Error);
    });

    it('Class: SyntaxError', function () {
        const f = () => require('vm').runInThisContext('binary ! isNotOk');
        chai.expect(f).to.throw(SyntaxError);

        try {
            f();
        } catch (err) {
            chai.expect(err).to.be.an.instanceof(SyntaxError);
        }

    });
});
